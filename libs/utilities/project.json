{
  "name": "utilities",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "libs/utilities/src",
  "projectType": "library",
  "targets": {
    "build": {
      "executor": "@nrwl/web:rollup",
      "outputs": [
        "{options.outputPath}"
      ],
      "options": {
        "outputPath": "dist/libs/utilities",
        "main": "libs/utilities/src/index.ts",
        "entryFile": "libs/utilities/src/index.ts",
        "tsConfig": "libs/utilities/tsconfig.lib.json",
        "assets": [],
        "project": "libs/utilities/package.json",
        "compiler": "babel",
        "external": [
          "typescript"
        ],
        "format": [
          "cjs",
          "esm",
          "umd"
        ]
      }
    },
    "bundle": {
      "executor": "@nrwl/webpack:webpack",
      "outputs": [
        "{options.outputPath}"
      ],
      "options": {
        "babelUpwardRootMode": true,
        "libraryName": "OctraUtilities",
        "libraryTargets": [
          "global",
          "commonjs",
          "amd",
          "umd"
        ],
        "index": "",
        "tsConfig": "libs/utilities/tsconfig.lib.json",
        "main": "libs/utilities/src/index.ts",
        "outputPath": "dist/libs/utilities/bundles",
        "compiler": "babel",
        "optimization": true,
        "extractLicenses": true,
        "runtimeChunk": false,
        "vendorChunk": false,
        "generateIndexHtml": false,
        "commonChunk": false,
        "namedChunks": false,
        "webpackConfig": "webpack.config.js"
      }
    },
    "publish": {
      "executor": "nx:run-commands",
      "options": {
        "command": "node tools/scripts/publish.mjs utilities {args.ver} {args.tag}"
      },
      "dependsOn": [
        "build"
      ]
    },
    "lint": {
      "executor": "@nrwl/linter:eslint",
      "outputs": [
        "{options.outputFile}"
      ],
      "options": {
        "lintFilePatterns": [
          "libs/utilities/**/*.ts"
        ]
      }
    },
    "test": {
      "executor": "@nrwl/jest:jest",
      "outputs": [
        "{workspaceRoot}/coverage/{projectRoot}"
      ],
      "options": {
        "jestConfig": "libs/utilities/jest.config.ts",
        "passWithNoTests": true
      },
      "configurations": {
        "ci": {
          "ci": true,
          "codeCoverage": true
        }
      }
    }
  },
  "tags": []
}
